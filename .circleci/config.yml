version: 2.1


orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: circleci
          template: basic_fail_1



  install_awscli:
      description: Install aws cli v2
      steps:
        - run:
            name: install aws cli v2
            command: |
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  unzip awscliv2.zip
                  sudo ./aws/install
    
  install_ansible:
      description: install ansible 
      steps:
        - run:
            name: install ansible
            command: |
                  sudo apt update
                  sudo apt install software-properties-common
                  sudo add-apt-repository --yes --update ppa:ansible/ansible 
                  sudo apt install ansible


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here
  #     workflow_id:
  #       type: string
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         when: on_fail
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
  #           --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.workflow_id >>)
  #           if(( $SUCCESS==1 )); 
  #           then
  #           cd backend
  #           npm run migrations:revert
  #           fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm install
            npm run build
            pwd && ls -al
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm install
            npm run build
            cp .env dist/.env
            pwd && ls -al
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: test-frontend
          working_directory: ./frontend
          command: |
            npm install
            npm run test
      - notify_on_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: test-backend
          working_directory: ./backend
          command: |
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      # - run:
      #     name: save the new back-end url to memory using memstach
      #     command: |
      #       backend_url=$(aws ec2 describe-instances \
      #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #       --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --output text)
      #       curl -H "Content-Type: text/plain" \
      #       -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
      #       --request PUT \
      #       --data "http://${backend_url}:3030" \
      #       https://api.memstash.io/values/backend_url
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1a:ed:08:e3:9b:3d:97:6f:69:7d:25:aa:0d:d4:7f:cb"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # run-migrations:
  #   docker:
  #     - image: sleavely/node-awscli:14.x
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           cat .env
  #           npm i
  #           npm run build
  #           npm run migrations
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           echo "has been done successfully" > ./migration_status.txt
  #           pwd && ls -al
  #           if grep -q "has been done successfully" ./migration_status.txt 
  #           then 
  #             echo "has been done successfully"
  #             curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "1" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
  #           else
  #             echo "has failed"
  #             curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "0" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
  #           fi
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-frontend:
  #   docker:
  #     - image: sleavely/node-awscli:14.x
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /root
  #     - run:
  #         name: Get backend url
  #         command: |
  #           API_URL=$(curl -H "Content-Type: text/plain" \
  #           -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
  #           --request GET \
  #           https://api.memstash.io/values/backend_url)
  #           echo $API_URL
  #           echo "${API_URL}"
  #           echo "NODE_ENV=production" >> frontend/.env
  #           echo "API_URL=${API_URL}" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         working_directory: ./frontend
  #         command: |
  #           npm i
  #           npm run build
  #           ls -l
  #           aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #       environment:
  #         NODE_ENV: "local"
  #         VERSION: "1"
  #         ENVIRONMENT: "production"
  #         TYPEORM_CONNECTION: $TYPEORM_CONNECTION
  #         TYPEORM_HOST: $TYPEORM_HOST
  #         TYPEORM_USERNAME: $TYPEORM_USERNAME
  #         TYPEORM_PASSWORD: $TYPEORM_PASSWORD
  #         TYPEORM_DATABASE: $TYPEORM_DATABASE
  #         TYPEORM_PORT: $TYPEORM_PORT
  #         TYPEORM_ENTITIES: $TYPEORM_ENTITIES
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["eb:8c:c3:a9:4b:36:3f:c7:69:df:e2:36:d3:22:f5:ed"]
  #     - attach_workspace:
  #         at: /root
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible rsync 
  #           apk add curl
  #           pip3 install awscli
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           ls /root
  #           ls /root/project/backend/
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # smoke-test:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /root
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl
  #           pip install awscli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           ls 
  #           pwd
  #           export backend_url=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
  #           --request GET https://api.memstash.io/values/backend_url)
  #           echo $backend_url
  #           # curl "$backend_url/api/status"
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: get old workflow for clean
  #         command: |
  #           WorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "$WorkflowID" https://api.memstash.io/values/workflowid
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --stack-name "udapeople-cloudfrontstack" \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     # Here's where you will add some code to rollback on failure
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           OldWorkflowID=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request GET https://api.memstash.io/values/workflowid)
  #           CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
  #           if [[ $OldWorkflowID == "" ]]
  #           then
  #           echo "No workflow id found"
  #           else
  #           if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
  #           then
  #             echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #           fi
  #           fi


  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: circleci
          template: success_tagged_deployment_1


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires:
      #       - run-migrations
      # - deploy-frontend:
      #     requires:
      #       - run-migrations
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
